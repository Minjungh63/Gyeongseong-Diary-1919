{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"FontDisplay\", {\n  enumerable: true,\n  get: function get() {\n    return _Font.FontDisplay;\n  }\n});\nexports.isLoaded = isLoaded;\nexports.isLoading = isLoading;\nexports.loadAsync = loadAsync;\nexports.processFontFamily = processFontFamily;\nexports.unloadAllAsync = unloadAllAsync;\nexports.unloadAsync = unloadAsync;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _ExpoFontLoader = _interopRequireDefault(require(\"./ExpoFontLoader\"));\nvar _Font = require(\"./Font.types\");\nvar _FontLoader = require(\"./FontLoader\");\nvar loaded = {};\nvar loadPromises = {};\nfunction processFontFamily(fontFamily) {\n  if (!fontFamily || !(0, _FontLoader.fontFamilyNeedsScoping)(fontFamily)) {\n    return fontFamily;\n  }\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\"You started loading the font \\\"\" + fontFamily + \"\\\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.\");\n      } else {\n        console.error(\"fontFamily \\\"\" + fontFamily + \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");\n      }\n    }\n    return 'System';\n  }\n  return \"ExpoFont-\" + (0, _FontLoader.getNativeFontName)(fontFamily);\n}\nfunction isLoaded(fontFamily) {\n  return fontFamily in loaded;\n}\nfunction isLoading(fontFamily) {\n  return fontFamily in loadPromises;\n}\nfunction loadAsync(_x, _x2) {\n  return _loadAsync.apply(this, arguments);\n}\nfunction _loadAsync() {\n  _loadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, source) {\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        throw new _expoModulesCore.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided source: \" + source + \". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\");\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      yield Promise.all(names.map(function (name) {\n        return loadFontInNamespaceAsync(name, fontMap[name]);\n      }));\n      return;\n    }\n    return yield loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  });\n  return _loadAsync.apply(this, arguments);\n}\nfunction loadFontInNamespaceAsync(_x3, _x4) {\n  return _loadFontInNamespaceAsync.apply(this, arguments);\n}\nfunction _loadFontInNamespaceAsync() {\n  _loadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, source) {\n    if (!source) {\n      throw new _expoModulesCore.CodedError(\"ERR_FONT_SOURCE\", \"Cannot load null or undefined font source: { \\\"\" + fontFamily + \"\\\": \" + source + \" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\" + fontFamily + \"\\\"\");\n    }\n    if (loaded[fontFamily]) {\n      return;\n    }\n    if (loadPromises.hasOwnProperty(fontFamily)) {\n      return loadPromises[fontFamily];\n    }\n    var asset = (0, _FontLoader.getAssetForSource)(source);\n    loadPromises[fontFamily] = (0, _asyncToGenerator2.default)(function* () {\n      try {\n        yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n        loaded[fontFamily] = true;\n      } finally {\n        delete loadPromises[fontFamily];\n      }\n    })();\n    yield loadPromises[fontFamily];\n  });\n  return _loadFontInNamespaceAsync.apply(this, arguments);\n}\nfunction unloadAllAsync() {\n  return _unloadAllAsync.apply(this, arguments);\n}\nfunction _unloadAllAsync() {\n  _unloadAllAsync = (0, _asyncToGenerator2.default)(function* () {\n    if (!_ExpoFontLoader.default.unloadAllAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n    }\n    if (Object.keys(loadPromises).length) {\n      throw new _expoModulesCore.CodedError(\"ERR_UNLOAD\", \"Cannot unload fonts while they're still loading: \" + Object.keys(loadPromises).join(', '));\n    }\n    for (var fontFamily of Object.keys(loaded)) {\n      delete loaded[fontFamily];\n    }\n    yield _ExpoFontLoader.default.unloadAllAsync();\n  });\n  return _unloadAllAsync.apply(this, arguments);\n}\nfunction unloadAsync(_x5, _x6) {\n  return _unloadAsync.apply(this, arguments);\n}\nfunction _unloadAsync() {\n  _unloadAsync = (0, _asyncToGenerator2.default)(function* (fontFamilyOrFontMap, options) {\n    if (!_ExpoFontLoader.default.unloadAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n    }\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (options) {\n        throw new _expoModulesCore.CodedError(\"ERR_FONT_API\", \"No fontFamily can be used for the provided options: \" + options + \". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      yield Promise.all(names.map(function (name) {\n        return unloadFontInNamespaceAsync(name, fontMap[name]);\n      }));\n      return;\n    }\n    return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n  });\n  return _unloadAsync.apply(this, arguments);\n}\nfunction unloadFontInNamespaceAsync(_x7, _x8) {\n  return _unloadFontInNamespaceAsync.apply(this, arguments);\n}\nfunction _unloadFontInNamespaceAsync() {\n  _unloadFontInNamespaceAsync = (0, _asyncToGenerator2.default)(function* (fontFamily, options) {\n    if (!loaded[fontFamily]) {\n      return;\n    } else {\n      delete loaded[fontFamily];\n    }\n    var nativeFontName = (0, _FontLoader.getNativeFontName)(fontFamily);\n    if (!nativeFontName) {\n      throw new _expoModulesCore.CodedError(\"ERR_FONT_FAMILY\", \"Cannot unload an empty name\");\n    }\n    yield _ExpoFontLoader.default.unloadAsync(nativeFontName, options);\n  });\n  return _unloadFontInNamespaceAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/Font.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/introduction/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  return fontFamily in loaded;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport async function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _reactNative = require(\"react-native\");\nvar NavigationBar = _reactNative.NativeModules.NavigationBar;\nvar navigationHide = function () {\n  var _ref = (0, _asyncToGenerator2.default)(function* () {\n    if (_reactNative.Platform.OS === 'android') {\n      return yield NavigationBar.navigationHide();\n    }\n  });\n  return function navigationHide() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar navigationShow = function () {\n  var _ref2 = (0, _asyncToGenerator2.default)(function* () {\n    if (_reactNative.Platform.OS === 'android') {\n      return yield NavigationBar.navigationShow();\n    }\n  });\n  return function navigationShow() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar leanBack = function () {\n  var _ref3 = (0, _asyncToGenerator2.default)(function* () {\n    if (_reactNative.Platform.OS === 'android') {\n      return yield NavigationBar.leanBack();\n    }\n  });\n  return function leanBack() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar immersive = function () {\n  var _ref4 = (0, _asyncToGenerator2.default)(function* () {\n    if (_reactNative.Platform.OS === 'android') {\n      return yield NavigationBar.immersive();\n    }\n  });\n  return function immersive() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar stickyImmersive = function () {\n  var _ref5 = (0, _asyncToGenerator2.default)(function* () {\n    if (_reactNative.Platform.OS === 'android') {\n      return yield NavigationBar.stickyImmersive();\n    }\n  });\n  return function stickyImmersive() {\n    return _ref5.apply(this, arguments);\n  };\n}();\nvar lowProfile = function () {\n  var _ref6 = (0, _asyncToGenerator2.default)(function* () {\n    if (_reactNative.Platform.OS === 'android') {\n      return yield NavigationBar.lowProfile();\n    }\n  });\n  return function lowProfile() {\n    return _ref6.apply(this, arguments);\n  };\n}();\nvar getBarModeTypes = function getBarModeTypes(style, bar) {\n  var modeStyle = style === 'light' ? NavigationBar.LIGHT : style === 'dark' ? NavigationBar.DARK : NavigationBar.NO_MODE;\n  var mode = bar === 'navigation' ? NavigationBar.NAVIGATION_BAR : bar === 'status' ? NavigationBar.STATUS_BAR : NavigationBar.NAVIGATION_BAR_STATUS_BAR;\n  return {\n    modeStyle: modeStyle,\n    mode: mode\n  };\n};\nvar setBarMode = function () {\n  var _ref7 = (0, _asyncToGenerator2.default)(function* (style, bar) {\n    if (_reactNative.Platform.OS === 'android') {\n      var _getBarModeTypes = getBarModeTypes(style, bar),\n        modeStyle = _getBarModeTypes.modeStyle,\n        mode = _getBarModeTypes.mode;\n      return yield NavigationBar.setBarMode(modeStyle, mode);\n    }\n  });\n  return function setBarMode(_x, _x2) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nvar setNavigationColor = function () {\n  var _ref8 = (0, _asyncToGenerator2.default)(function* (color, style, bar) {\n    if (_reactNative.Platform.OS === 'android') {\n      var _getBarModeTypes2 = getBarModeTypes(style, bar),\n        modeStyle = _getBarModeTypes2.modeStyle,\n        mode = _getBarModeTypes2.mode;\n      return yield NavigationBar.setNavigationColor((0, _reactNative.processColor)(color), color === 'translucent', modeStyle, mode);\n    }\n  });\n  return function setNavigationColor(_x3, _x4, _x5) {\n    return _ref8.apply(this, arguments);\n  };\n}();\nvar setNavigationBarDividerColor = function () {\n  var _ref9 = (0, _asyncToGenerator2.default)(function* (color) {\n    if (_reactNative.Platform.OS === 'android') {\n      return yield NavigationBar.setNavigationBarDividerColor((0, _reactNative.processColor)(color));\n    }\n  });\n  return function setNavigationBarDividerColor(_x6) {\n    return _ref9.apply(this, arguments);\n  };\n}();\nvar setNavigationBarContrastEnforced = function () {\n  var _ref10 = (0, _asyncToGenerator2.default)(function* (enforceContrast) {\n    if (_reactNative.Platform.OS === 'android') {\n      return yield NavigationBar.setNavigationBarContrastEnforced(enforceContrast || false);\n    }\n  });\n  return function setNavigationBarContrastEnforced(_x7) {\n    return _ref10.apply(this, arguments);\n  };\n}();\nvar fullScreen = function () {\n  var _ref11 = (0, _asyncToGenerator2.default)(function* (enable) {\n    if (_reactNative.Platform.OS === 'android') {\n      return yield NavigationBar.fullScreen(enable || false);\n    }\n  });\n  return function fullScreen(_x8) {\n    return _ref11.apply(this, arguments);\n  };\n}();\nvar SystemNavigationBar = {\n  navigationHide: navigationHide,\n  navigationShow: navigationShow,\n  leanBack: leanBack,\n  immersive: immersive,\n  stickyImmersive: stickyImmersive,\n  lowProfile: lowProfile,\n  setBarMode: setBarMode,\n  setNavigationColor: setNavigationColor,\n  setNavigationBarDividerColor: setNavigationBarDividerColor,\n  setNavigationBarContrastEnforced: setNavigationBarContrastEnforced,\n  fullScreen: fullScreen\n};\nvar _default = SystemNavigationBar;\nexports.default = _default;","map":{"version":3,"sources":["index.tsx"],"names":["NavigationBar","NativeModules","navigationHide","Platform","OS","navigationShow","leanBack","immersive","stickyImmersive","lowProfile","getBarModeTypes","style","bar","modeStyle","LIGHT","DARK","NO_MODE","mode","NAVIGATION_BAR","STATUS_BAR","NAVIGATION_BAR_STATUS_BAR","setBarMode","setNavigationColor","color","processColor","setNavigationBarDividerColor","setNavigationBarContrastEnforced","enforceContrast","fullScreen","enable","SystemNavigationBar"],"mappings":"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","sourcesContent":["import { NativeModules, Platform, processColor } from 'react-native';\n\nconst { NavigationBar } = NativeModules;\n\nconst navigationHide = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.navigationHide();\n  }\n};\n\nconst navigationShow = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.navigationShow();\n  }\n};\n\nconst leanBack = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.leanBack();\n  }\n};\n\nconst immersive = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.immersive();\n  }\n};\n\nconst stickyImmersive = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.stickyImmersive();\n  }\n};\n\nconst lowProfile = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.lowProfile();\n  }\n};\n\nconst getBarModeTypes = (\n  style?: 'light' | 'dark',\n  bar?: 'navigation' | 'status' | 'both'\n) => {\n  const modeStyle =\n    style === 'light'\n      ? NavigationBar.LIGHT\n      : style === 'dark'\n      ? NavigationBar.DARK\n      : NavigationBar.NO_MODE;\n\n  const mode =\n    bar === 'navigation'\n      ? NavigationBar.NAVIGATION_BAR\n      : bar === 'status'\n      ? NavigationBar.STATUS_BAR\n      : NavigationBar.NAVIGATION_BAR_STATUS_BAR;\n\n  return {\n    modeStyle,\n    mode,\n  };\n};\n\nconst setBarMode = async (\n  style?: 'light' | 'dark',\n  bar?: 'navigation' | 'status' | 'both'\n) => {\n  if (Platform.OS === 'android') {\n    const { modeStyle, mode } = getBarModeTypes(style, bar);\n    return await NavigationBar.setBarMode(modeStyle, mode);\n  }\n};\n\nconst setNavigationColor = async (\n  color: string | number,\n  style?: 'light' | 'dark',\n  bar?: 'navigation' | 'status' | 'both'\n) => {\n  if (Platform.OS === 'android') {\n    const { modeStyle, mode } = getBarModeTypes(style, bar);\n    return await NavigationBar.setNavigationColor(\n      processColor(color),\n      color === 'translucent',\n      modeStyle,\n      mode\n    );\n  }\n};\n\nconst setNavigationBarDividerColor = async (color: string | number) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.setNavigationBarDividerColor(\n      processColor(color)\n    );\n  }\n};\n\nconst setNavigationBarContrastEnforced = async (enforceContrast?: boolean) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.setNavigationBarContrastEnforced(\n      enforceContrast || false\n    );\n  }\n};\n\nconst fullScreen = async (enable?: boolean) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.fullScreen(enable || false);\n  }\n};\n\nvar SystemNavigationBar = {\n  navigationHide,\n  navigationShow,\n  leanBack,\n  immersive,\n  stickyImmersive,\n  lowProfile,\n  setBarMode,\n  setNavigationColor,\n  setNavigationBarDividerColor,\n  setNavigationBarContrastEnforced,\n  fullScreen,\n};\n\nexport default SystemNavigationBar;\n"]},"metadata":{},"sourceType":"script"}